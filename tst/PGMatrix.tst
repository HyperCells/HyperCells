gap> START_TEST("HyperCells: PGMatrix.tst");

# Triangle group (2,8,8)
gap> fulltg := TriangleGroup( [ 2, 8, 8 ] );;
gap> tg := ProperTriangleGroup( [ 2, 8, 8 ] );;
gap> qpc := TGQuotient( 1, [ 2, 8, 8 ] );;
gap> cgpc := TGCellGraph( tg, qpc, 3 );;
gap> DELTA := FpGroup(fulltg);;
gap> symmetries := [DELTA.1, DELTA.2, DELTA.3];;
gap> symNames := ["A", "B", "C"];;


# Test single symmetry
gap> pgMat := PGMatrix(symmetries[1], DELTA, GetTGCell(cgpc), 1);
[ [ 2, 8, 8 ], [ 2, 6 ],
  [
      [ "a", [ [ 0, 1, 0, 0 ], [ 1, 0, 0, 0 ], [ -1, -1, -1, 0 ], [ 0, 0, 0, 1 ]
             ] ] ] ]
gap> pgMat := PGMatrix(symmetries[1], DELTA, GetTGCell(cgpc), 1 : symNames := symNames[1]);
[ [ 2, 8, 8 ], [ 2, 6 ],
  [
      [ "A", [ [ 0, 1, 0, 0 ], [ 1, 0, 0, 0 ], [ -1, -1, -1, 0 ], [ 0, 0, 0, 1 ]
             ] ] ] ]
gap> pgMat := PGMatrix(symmetries[1], DELTA, GetTGCell(cgpc), 1 : symNames := symNames[1], sparse := true);
[ [ 2, 8, 8 ], [ 2, 6 ],
  [ [ "A", [ [ [ 1, 2 ], 1 ], [ [ 2, 1 ], 1 ], [ [ 3, 1 ], -1 ], [ [ 3, 2 ], -1 ], [ [ 3, 3 ], -1 ], [ [ 4, 4 ], 1 ]
             ] ] ] ]


# Test list of symmetries
gap> pgMat := PGMatrix(symmetries, DELTA, GetTGCell(cgpc), 1);
[ [ 2, 8, 8 ], [ 2, 6 ],
  [
      [ "a", [ [ 0, 1, 0, 0 ], [ 1, 0, 0, 0 ], [ -1, -1, -1, 0 ], [ 0, 0, 0, 1 ]
             ] ],
      [ "b",
          [ [ 0, -1, 0, 0 ], [ -1, 0, 0, 0 ], [ 1, 1, 1, 0 ], [ 0, 0, 0, -1 ]
             ] ],
      [ "c",
          [ [ -1, 0, 0, 0 ], [ 1, 1, 1, 1 ], [ 0, 0, 0, -1 ], [ 0, 0, -1, 0 ]
             ] ] ] ]
gap> pgMat := PGMatrix(symmetries, DELTA, GetTGCell(cgpc), 1 : symNames := symNames);
[ [ 2, 8, 8 ], [ 2, 6 ],
  [
      [ "A", [ [ 0, 1, 0, 0 ], [ 1, 0, 0, 0 ], [ -1, -1, -1, 0 ], [ 0, 0, 0, 1 ]
             ] ],
      [ "B",
          [ [ 0, -1, 0, 0 ], [ -1, 0, 0, 0 ], [ 1, 1, 1, 0 ], [ 0, 0, 0, -1 ]
             ] ],
      [ "C",
          [ [ -1, 0, 0, 0 ], [ 1, 1, 1, 1 ], [ 0, 0, 0, -1 ], [ 0, 0, -1, 0 ]
             ] ] ] ]
gap> pgMat := PGMatrix(symmetries, DELTA, GetTGCell(cgpc), 1 : symNames := symNames, sparse := true);
[ [ 2, 8, 8 ], [ 2, 6 ],
  [ [ "A", [ [ [ 1, 2 ], 1 ], [ [ 2, 1 ], 1 ], [ [ 3, 1 ], -1 ], [ [ 3, 2 ], -1 ], [ [ 3, 3 ], -1 ], [ [ 4, 4 ], 1 ]
             ] ],
      [ "B", [ [ [ 1, 2 ], -1 ], [ [ 2, 1 ], -1 ], [ [ 3, 1 ], 1 ], [ [ 3, 2 ], 1 ], [ [ 3, 3 ], 1 ],
              [ [ 4, 4 ], -1 ] ] ],
      [ "C", [ [ [ 1, 1 ], -1 ], [ [ 2, 1 ], 1 ], [ [ 2, 2 ], 1 ], [ [ 2, 3 ], 1 ], [ [ 2, 4 ], 1 ], [ [ 3, 4 ], -1 ],
              [ [ 4, 3 ], -1 ] ] ] ] ]


# Test export and import
gap> str := "";;
gap> output := OutputTextString(str, false);;
gap> ExportPGMatrixStream(pgMat, output);;
gap> CloseStream(output);;
gap> Print(str);
[ 2, 8, 8 ]
[ 2, 6 ]
[ [ "A", [ [ [ 1, 2 ], 1 ], [ [ 2, 1 ], 1 ], [ [ 3, 1 ], -1 ], [ [ 3, 2 ], -1 ], [ [ 3, 3 ], -1 ], [ [ 4, 4 ], 1 ] ] ]\
, [ "B", [ [ [ 1, 2 ], -1 ], [ [ 2, 1 ], -1 ], [ [ 3, 1 ], 1 ], [ [ 3, 2 ], 1 ], [ [ 3, 3 ], 1 ], [ [ 4, 4 ], -1 ] ] ]\
, [ "C", [ [ [ 1, 1 ], -1 ], [ [ 2, 1 ], 1 ], [ [ 2, 2 ], 1 ], [ [ 2, 3 ], 1 ], [ [ 2, 4 ], 1 ], [ [ 3, 4 ], -1 ], [ [\
 4, 3 ], -1 ] ] ] ]

gap> input := InputTextString(str);;
gap> pgMat2 := ImportPGMatrix(input);
[ [ 2, 8, 8 ], [ 2, 6 ],
  [ [ "A", [ [ [ 1, 2 ], 1 ], [ [ 2, 1 ], 1 ], [ [ 3, 1 ], -1 ], [ [ 3, 2 ], -1 ], [ [ 3, 3 ], -1 ], [ [ 4, 4 ], 1 ]
             ] ],
      [ "B", [ [ [ 1, 2 ], -1 ], [ [ 2, 1 ], -1 ], [ [ 3, 1 ], 1 ], [ [ 3, 2 ], 1 ], [ [ 3, 3 ], 1 ],
              [ [ 4, 4 ], -1 ] ] ],
      [ "C", [ [ [ 1, 1 ], -1 ], [ [ 2, 1 ], 1 ], [ [ 2, 2 ], 1 ], [ [ 2, 3 ], 1 ], [ [ 2, 4 ], 1 ], [ [ 3, 4 ], -1 ],
              [ [ 4, 3 ], -1 ] ] ] ] ]
gap> pgMat2 = pgMat;
true


# Test on supercell
gap> qsc := TGQuotient( [3, 11] );;
gap> csc := TGCellSymmetric( tg, qsc, 3 );;


# Test single symmetry
gap> pgMat := PGMatrix(symmetries[1], DELTA, csc, [3, 11] );
[ [ 2, 8, 8 ], [ 3, 11 ],
  [
      [ "a", [ [ 0, 1, 0, 0, 0, 0 ], [ 1, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 1, 0, 0 ],
              [ 0, 0, 1, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 1 ],
              [ 0, 0, 0, 0, 1, 0 ] ] ] ] ]
gap> pgMat := PGMatrix(symmetries[1], DELTA, csc, [3, 11] : symNames := symNames[1]);
[ [ 2, 8, 8 ], [ 3, 11 ],
  [
      [ "A", [ [ 0, 1, 0, 0, 0, 0 ], [ 1, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 1, 0, 0 ],
              [ 0, 0, 1, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 1 ],
              [ 0, 0, 0, 0, 1, 0 ] ] ] ] ]
gap> pgMat := PGMatrix(symmetries[1], DELTA, csc, [3, 11] : symNames := symNames[1], sparse := true);
[ [ 2, 8, 8 ], [3, 11] ,
  [ [ "A", [ [ [ 1, 2 ], 1 ], [ [ 2, 1 ], 1 ], [ [ 3, 4 ], 1 ], [ [ 4, 3 ], 1 ], [ [ 5, 6 ], 1 ], [ [ 6, 5 ], 1 ] ] ]
     ] ]


# Test list of symmetries
gap> pgMat := PGMatrix(symmetries, DELTA, csc, [3, 11] );
[ [ 2, 8, 8 ], [ 3, 11 ],
  [
      [ "a", [ [ 0, 1, 0, 0, 0, 0 ], [ 1, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 1, 0, 0 ],
              [ 0, 0, 1, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 1 ],
              [ 0, 0, 0, 0, 1, 0 ] ] ],
      [ "b",
          [ [ 0, -1, 0, 0, 0, 0 ], [ -1, 0, 0, 0, 0, 0 ],
              [ 0, 0, 0, -1, 0, 0 ], [ 0, 0, -1, 0, 0, 0 ],
              [ 0, 0, 0, 0, 0, -1 ], [ 0, 0, 0, 0, -1, 0 ] ] ],
      [ "c",
          [ [ -1, 0, 0, 0, 0, 0 ], [ 0, 0, -1, 0, 0, 0 ],
              [ 0, -1, 0, 0, 0, 0 ], [ 0, 0, 0, 0, -1, 0 ],
              [ 0, 0, 0, -1, 0, 0 ], [ 0, 1, 1, 0, 0, 1 ] ] ] ] ]
gap> pgMat := PGMatrix(symmetries, DELTA, csc, [3, 11] : symNames := symNames);
[ [ 2, 8, 8 ], [ 3, 11 ],
  [
      [ "A", [ [ 0, 1, 0, 0, 0, 0 ], [ 1, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 1, 0, 0 ],
              [ 0, 0, 1, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 1 ],
              [ 0, 0, 0, 0, 1, 0 ] ] ],
      [ "B",
          [ [ 0, -1, 0, 0, 0, 0 ], [ -1, 0, 0, 0, 0, 0 ],
              [ 0, 0, 0, -1, 0, 0 ], [ 0, 0, -1, 0, 0, 0 ],
              [ 0, 0, 0, 0, 0, -1 ], [ 0, 0, 0, 0, -1, 0 ] ] ],
      [ "C",
          [ [ -1, 0, 0, 0, 0, 0 ], [ 0, 0, -1, 0, 0, 0 ],
              [ 0, -1, 0, 0, 0, 0 ], [ 0, 0, 0, 0, -1, 0 ],
              [ 0, 0, 0, -1, 0, 0 ], [ 0, 1, 1, 0, 0, 1 ] ] ] ] ]
gap> pgMat := PGMatrix(symmetries, DELTA, csc, [3, 11] : symNames := symNames, sparse := true);
[ [ 2, 8, 8 ], [3, 11],
  [ [ "A", [ [ [ 1, 2 ], 1 ], [ [ 2, 1 ], 1 ], [ [ 3, 4 ], 1 ], [ [ 4, 3 ], 1 ], [ [ 5, 6 ], 1 ], [ [ 6, 5 ], 1 ] ] ],
      [ "B", [ [ [ 1, 2 ], -1 ], [ [ 2, 1 ], -1 ], [ [ 3, 4 ], -1 ], [ [ 4, 3 ], -1 ], [ [ 5, 6 ], -1 ],
              [ [ 6, 5 ], -1 ] ] ],
      [ "C", [ [ [ 1, 1 ], -1 ], [ [ 2, 3 ], -1 ], [ [ 3, 2 ], -1 ], [ [ 4, 5 ], -1 ], [ [ 5, 4 ], -1 ],
              [ [ 6, 2 ], 1 ], [ [ 6, 3 ], 1 ], [ [ 6, 6 ], 1 ] ] ] ] ]


# Test export and import
gap> str := "";;
gap> output := OutputTextString(str, false);;
gap> ExportPGMatrixStream(pgMat, output);;
gap> CloseStream(output);;
gap> Print(str);
[ 2, 8, 8 ]
[ 3, 11 ]
[ [ "A", [ [ [ 1, 2 ], 1 ], [ [ 2, 1 ], 1 ], [ [ 3, 4 ], 1 ], [ [ 4, 3 ], 1 ], [ [ 5, 6 ], 1 ], [ [ 6, 5 ], 1 ] ] ], [\
 "B", [ [ [ 1, 2 ], -1 ], [ [ 2, 1 ], -1 ], [ [ 3, 4 ], -1 ], [ [ 4, 3 ], -1 ], [ [ 5, 6 ], -1 ], [ [ 6, 5 ], -1 ] ] ]\
, [ "C", [ [ [ 1, 1 ], -1 ], [ [ 2, 3 ], -1 ], [ [ 3, 2 ], -1 ], [ [ 4, 5 ], -1 ], [ [ 5, 4 ], -1 ], [ [ 6, 2 ], 1 ], \
[ [ 6, 3 ], 1 ], [ [ 6, 6 ], 1 ] ] ] ]
gap> input := InputTextString(str);;
gap> pgMat2 := ImportPGMatrix(input);
[ [ 2, 8, 8 ], [ 3, 11 ],
  [ [ "A", [ [ [ 1, 2 ], 1 ], [ [ 2, 1 ], 1 ], [ [ 3, 4 ], 1 ], [ [ 4, 3 ], 1 ], [ [ 5, 6 ], 1 ], [ [ 6, 5 ], 1 ] ] ],
      [ "B", [ [ [ 1, 2 ], -1 ], [ [ 2, 1 ], -1 ], [ [ 3, 4 ], -1 ], [ [ 4, 3 ], -1 ], [ [ 5, 6 ], -1 ],
              [ [ 6, 5 ], -1 ] ] ],
      [ "C", [ [ [ 1, 1 ], -1 ], [ [ 2, 3 ], -1 ], [ [ 3, 2 ], -1 ], [ [ 4, 5 ], -1 ], [ [ 5, 4 ], -1 ],
              [ [ 6, 2 ], 1 ], [ [ 6, 3 ], 1 ], [ [ 6, 6 ], 1 ] ] ] ] ]
gap> pgMat2 = pgMat;
true

gap> STOP_TEST("PGMatrix.tst");